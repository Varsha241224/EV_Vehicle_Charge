{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM0aYF6Nn9S/MWPU34/P5d2",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Varsha241224/EV_Vehicle_Charge/blob/main/app.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install streamlit"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B4gfbdCUBqgm",
        "outputId": "926d5336-57b5-45a3-fea2-984dd1db0ff4"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting streamlit\n",
            "  Downloading streamlit-1.47.1-py3-none-any.whl.metadata (9.0 kB)\n",
            "Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<7,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.2.1)\n",
            "Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.0.2)\n",
            "Requirement already satisfied: packaging<26,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (25.0)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.2.2)\n",
            "Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (11.3.0)\n",
            "Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.29.5)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.5.0)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.14.1)\n",
            "Collecting watchdog<7,>=2.1.5 (from streamlit)\n",
            "  Downloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl.metadata (44 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.3/44.3 kB\u001b[0m \u001b[31m3.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.45)\n",
            "Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n",
            "  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n",
            "Requirement already satisfied: tornado!=6.5.0,<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (4.25.0)\n",
            "Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (2.0.1)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.7.14)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2025.4.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.26.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n",
            "Downloading streamlit-1.47.1-py3-none-any.whl (9.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.9/9.9 MB\u001b[0m \u001b[31m97.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m104.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl (79 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.1/79.1 kB\u001b[0m \u001b[31m8.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: watchdog, pydeck, streamlit\n",
            "Successfully installed pydeck-0.9.1 streamlit-1.47.1 watchdog-6.0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import joblib\n",
        "from datetime import datetime\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set Streamlit page config first thing\n",
        "st.set_page_config(page_title=\"EV Forecast\", layout=\"wide\")\n",
        "\n",
        "# === Load model ===\n",
        "model = joblib.load('forecasting_ev_model.pkl')\n",
        "\n",
        "# === Styling ===\n",
        "st.markdown(\"\"\"\n",
        "    <style>\n",
        "        body {\n",
        "            background-color: #fcf7f7;\n",
        "            color: #000000;\n",
        "        }\n",
        "        .stApp {\n",
        "            background: linear-gradient(to right, #c2d3f2, #7f848a);\n",
        "        }\n",
        "    </style>\n",
        "\"\"\", unsafe_allow_html=True)\n",
        "\n",
        "# Display image after config and styles\n",
        "# Stylized title using markdown + HTML\n",
        "st.markdown(\"\"\"\n",
        "    <div style='text-align: center; font-size: 36px; font-weight: bold; color: #FFFFFF; margin-top: 20px;'>\n",
        "        🔮 EV Adoption Forecaster for a County in Washington State\n",
        "    </div>\n",
        "\"\"\", unsafe_allow_html=True)\n",
        "\n",
        "# Welcome subtitle\n",
        "st.markdown(\"\"\"\n",
        "    <div style='text-align: center; font-size: 22px; font-weight: bold; padding-top: 10px; margin-bottom: 25px; color: #FFFFFF;'>\n",
        "        Welcome to the Electric Vehicle (EV) Adoption Forecast tool.\n",
        "    </div>\n",
        "\"\"\", unsafe_allow_html=True)\n",
        "\n",
        "# Image\n",
        "st.image(\"ev_car_image.webp\", use_container_width=True)\n",
        "\n",
        "# Instruction line\n",
        "st.markdown(\"\"\"\n",
        "    <div style='text-align: left; font-size: 22px; padding-top: 10px; color: #FFFFFF;'>\n",
        "        Select a county and see the forecasted EV adoption trend for the next 3 years.\n",
        "    </div>\n",
        "\"\"\", unsafe_allow_html=True)\n",
        "\n",
        "\n",
        "# === Load data (must contain historical values, features, etc.) ===\n",
        "@st.cache_data\n",
        "def load_data():\n",
        "    df = pd.read_csv(\"preprocessed_ev_data.csv\")\n",
        "    df['Date'] = pd.to_datetime(df['Date'])\n",
        "    return df\n",
        "\n",
        "df = load_data()\n",
        "\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "# Create the encoder\n",
        "le = LabelEncoder()\n",
        "\n",
        "# Apply it to the 'County' column\n",
        "df['county_encoded'] = le.fit_transform(df['County'])\n",
        "\n",
        "\n",
        "\n",
        "#########################################################################################################################\n",
        "# === County dropdown ===\n",
        "county_list = sorted(df['County'].dropna().unique().tolist())\n",
        "county = st.selectbox(\"Select a County\", county_list)\n",
        "\n",
        "if county not in df['County'].unique():\n",
        "    st.warning(f\"County '{county}' not found in dataset.\")\n",
        "    st.stop()\n",
        "\n",
        "county_df = df[df['County'] == county].sort_values(\"Date\")\n",
        "county_code = county_df['county_encoded'].iloc[0]\n",
        "\n",
        "# === Forecasting ===\n",
        "historical_ev = list(county_df['Electric Vehicle (EV) Total'].values[-6:])\n",
        "cumulative_ev = list(np.cumsum(historical_ev))\n",
        "months_since_start = county_df['months_since_start'].max()\n",
        "latest_date = county_df['Date'].max()\n",
        "\n",
        "future_rows = []\n",
        "forecast_horizon = 36\n",
        "\n",
        "for i in range(1, forecast_horizon + 1):\n",
        "    forecast_date = latest_date + pd.DateOffset(months=i)\n",
        "    months_since_start += 1\n",
        "    lag1, lag2, lag3 = historical_ev[-1], historical_ev[-2], historical_ev[-3]\n",
        "    roll_mean = np.mean([lag1, lag2, lag3])\n",
        "    pct_change_1 = (lag1 - lag2) / lag2 if lag2 != 0 else 0\n",
        "    pct_change_3 = (lag1 - lag3) / lag3 if lag3 != 0 else 0\n",
        "    recent_cumulative = cumulative_ev[-6:]\n",
        "    ev_growth_slope = np.polyfit(range(len(recent_cumulative)), recent_cumulative, 1)[0] if len(recent_cumulative) == 6 else 0\n",
        "\n",
        "    new_row = {\n",
        "        'months_since_start': months_since_start,\n",
        "        'county_encoded': county_code,\n",
        "        'ev_total_lag1': lag1,\n",
        "        'ev_total_lag2': lag2,\n",
        "        'ev_total_lag3': lag3,\n",
        "        'ev_total_roll_mean_3': roll_mean,\n",
        "        'ev_total_pct_change_1': pct_change_1,\n",
        "        'ev_total_pct_change_3': pct_change_3,\n",
        "        'ev_growth_slope': ev_growth_slope\n",
        "    }\n",
        "\n",
        "    pred = model.predict(pd.DataFrame([new_row]))[0]\n",
        "    future_rows.append({\"Date\": forecast_date, \"Predicted EV Total\": round(pred)})\n",
        "\n",
        "    historical_ev.append(pred)\n",
        "    if len(historical_ev) > 6:\n",
        "        historical_ev.pop(0)\n",
        "\n",
        "    cumulative_ev.append(cumulative_ev[-1] + pred)\n",
        "    if len(cumulative_ev) > 6:\n",
        "        cumulative_ev.pop(0)\n",
        "\n",
        "# === Combine Historical + Forecast for Cumulative Plot ===\n",
        "historical_cum = county_df[['Date', 'Electric Vehicle (EV) Total']].copy()\n",
        "historical_cum['Source'] = 'Historical'\n",
        "historical_cum['Cumulative EV'] = historical_cum['Electric Vehicle (EV) Total'].cumsum()\n",
        "\n",
        "forecast_df = pd.DataFrame(future_rows)\n",
        "forecast_df['Source'] = 'Forecast'\n",
        "forecast_df['Cumulative EV'] = forecast_df['Predicted EV Total'].cumsum() + historical_cum['Cumulative EV'].iloc[-1]\n",
        "\n",
        "combined = pd.concat([\n",
        "    historical_cum[['Date', 'Cumulative EV', 'Source']],\n",
        "    forecast_df[['Date', 'Cumulative EV', 'Source']]\n",
        "], ignore_index=True)\n",
        "\n",
        "# === Plot Cumulative Graph ===\n",
        "st.subheader(f\"📊 Cumulative EV Forecast for {county} County\")\n",
        "fig, ax = plt.subplots(figsize=(12, 6))\n",
        "for label, data in combined.groupby('Source'):\n",
        "    ax.plot(data['Date'], data['Cumulative EV'], label=label, marker='o')\n",
        "ax.set_title(f\"Cumulative EV Trend - {county} (3 Years Forecast)\", fontsize=14, color='white')\n",
        "ax.set_xlabel(\"Date\", color='white')\n",
        "ax.set_ylabel(\"Cumulative EV Count\", color='white')\n",
        "ax.grid(True, alpha=0.3)\n",
        "ax.set_facecolor(\"#1c1c1c\")\n",
        "fig.patch.set_facecolor('#1c1c1c')\n",
        "ax.tick_params(colors='white')\n",
        "ax.legend()\n",
        "st.pyplot(fig)\n",
        "\n",
        "# === Compare historical and forecasted cumulative EVs ===\n",
        "historical_total = historical_cum['Cumulative EV'].iloc[-1]\n",
        "forecasted_total = forecast_df['Cumulative EV'].iloc[-1]\n",
        "\n",
        "if historical_total > 0:\n",
        "    forecast_growth_pct = ((forecasted_total - historical_total) / historical_total) * 100\n",
        "    trend = \"increase 📈\" if forecast_growth_pct > 0 else \"decrease 📉\"\n",
        "    st.success(f\"Based on the graph, EV adoption in **{county}** is expected to show a **{trend} of {forecast_growth_pct:.2f}%** over the next 3 years.\")\n",
        "else:\n",
        "    st.warning(\"Historical EV total is zero, so percentage forecast change can't be computed.\")\n",
        "\n",
        "\n",
        "# === New: Compare up to 3 counties ===\n",
        "st.markdown(\"---\")\n",
        "st.header(\"Compare EV Adoption Trends for up to 3 Counties\")\n",
        "\n",
        "multi_counties = st.multiselect(\"Select up to 3 counties to compare\", county_list, max_selections=3)\n",
        "\n",
        "if multi_counties:\n",
        "    comparison_data = []\n",
        "\n",
        "    for cty in multi_counties:\n",
        "        cty_df = df[df['County'] == cty].sort_values(\"Date\")\n",
        "        cty_code = cty_df['county_encoded'].iloc[0]\n",
        "\n",
        "        hist_ev = list(cty_df['Electric Vehicle (EV) Total'].values[-6:])\n",
        "        cum_ev = list(np.cumsum(hist_ev))\n",
        "        months_since = cty_df['months_since_start'].max()\n",
        "        last_date = cty_df['Date'].max()\n",
        "\n",
        "        future_rows_cty = []\n",
        "        for i in range(1, forecast_horizon + 1):\n",
        "            forecast_date = last_date + pd.DateOffset(months=i)\n",
        "            months_since += 1\n",
        "            lag1, lag2, lag3 = hist_ev[-1], hist_ev[-2], hist_ev[-3]\n",
        "            roll_mean = np.mean([lag1, lag2, lag3])\n",
        "            pct_change_1 = (lag1 - lag2) / lag2 if lag2 != 0 else 0\n",
        "            pct_change_3 = (lag1 - lag3) / lag3 if lag3 != 0 else 0\n",
        "            recent_cum = cum_ev[-6:]\n",
        "            ev_slope = np.polyfit(range(len(recent_cum)), recent_cum, 1)[0] if len(recent_cum) == 6 else 0\n",
        "\n",
        "            new_row = {\n",
        "                'months_since_start': months_since,\n",
        "                'county_encoded': cty_code,\n",
        "                'ev_total_lag1': lag1,\n",
        "                'ev_total_lag2': lag2,\n",
        "                'ev_total_lag3': lag3,\n",
        "                'ev_total_roll_mean_3': roll_mean,\n",
        "                'ev_total_pct_change_1': pct_change_1,\n",
        "                'ev_total_pct_change_3': pct_change_3,\n",
        "                'ev_growth_slope': ev_slope\n",
        "            }\n",
        "            pred = model.predict(pd.DataFrame([new_row]))[0]\n",
        "            future_rows_cty.append({\"Date\": forecast_date, \"Predicted EV Total\": round(pred)})\n",
        "\n",
        "            hist_ev.append(pred)\n",
        "            if len(hist_ev) > 6:\n",
        "                hist_ev.pop(0)\n",
        "\n",
        "            cum_ev.append(cum_ev[-1] + pred)\n",
        "            if len(cum_ev) > 6:\n",
        "                cum_ev.pop(0)\n",
        "\n",
        "        hist_cum = cty_df[['Date', 'Electric Vehicle (EV) Total']].copy()\n",
        "        hist_cum['Cumulative EV'] = hist_cum['Electric Vehicle (EV) Total'].cumsum()\n",
        "\n",
        "        fc_df = pd.DataFrame(future_rows_cty)\n",
        "        fc_df['Cumulative EV'] = fc_df['Predicted EV Total'].cumsum() + hist_cum['Cumulative EV'].iloc[-1]\n",
        "\n",
        "        combined_cty = pd.concat([\n",
        "            hist_cum[['Date', 'Cumulative EV']],\n",
        "            fc_df[['Date', 'Cumulative EV']]\n",
        "        ], ignore_index=True)\n",
        "\n",
        "        combined_cty['County'] = cty\n",
        "        comparison_data.append(combined_cty)\n",
        "\n",
        "    # Combine all counties data for plotting\n",
        "    comp_df = pd.concat(comparison_data, ignore_index=True)\n",
        "\n",
        "    # Plot\n",
        "    st.subheader(\"📈 Comparison of Cumulative EV Adoption Trends\")\n",
        "    fig, ax = plt.subplots(figsize=(14, 7))\n",
        "    for cty, group in comp_df.groupby('County'):\n",
        "        ax.plot(group['Date'], group['Cumulative EV'], marker='o', label=cty)\n",
        "    ax.set_title(\"EV Adoption Trends: Historical + 3-Year Forecast\", fontsize=16, color='white')\n",
        "    ax.set_xlabel(\"Date\", color='white')\n",
        "    ax.set_ylabel(\"Cumulative EV Count\", color='white')\n",
        "    ax.grid(True, alpha=0.3)\n",
        "    ax.set_facecolor(\"#1c1c1c\")\n",
        "    fig.patch.set_facecolor('#1c1c1c')\n",
        "    ax.tick_params(colors='white')\n",
        "    ax.legend(title=\"County\")\n",
        "    st.pyplot(fig)\n",
        "\n",
        "    # Display % growth for selected counties ===\n",
        "    growth_summaries = []\n",
        "    for cty in multi_counties:\n",
        "        cty_df = comp_df[comp_df['County'] == cty].reset_index(drop=True)\n",
        "        historical_total = cty_df['Cumulative EV'].iloc[len(cty_df) - forecast_horizon - 1]\n",
        "        forecasted_total = cty_df['Cumulative EV'].iloc[-1]\n",
        "\n",
        "        if historical_total > 0:\n",
        "            growth_pct = ((forecasted_total - historical_total) / historical_total) * 100\n",
        "            growth_summaries.append(f\"{cty}: {growth_pct:.2f}%\")\n",
        "        else:\n",
        "            growth_summaries.append(f\"{cty}: N/A (no historical data)\")\n",
        "\n",
        "    # Join all in one sentence and show with st.success\n",
        "    growth_sentence = \" | \".join(growth_summaries)\n",
        "    st.success(f\"Forecasted EV adoption growth over next 3 years — {growth_sentence}\")\n",
        "\n",
        "st.success(\"Forecast complete\")\n",
        "\n",
        "st.markdown(\"Prepared for the **AICTE Internship Cycle 2 by S4F**\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "I_MFF9KcXLC1",
        "outputId": "ede3caba-f8b7-4fec-f2b3-1ec597e52de2"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2025-08-01 06:54:18.590 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.639 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.640 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.641 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.643 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.644 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.646 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.647 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.648 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.650 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.651 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.660 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.661 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.663 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.664 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.665 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.667 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.669 No runtime found, using MemoryCacheStorageManager\n",
            "2025-08-01 06:54:18.679 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.679 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.681 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.682 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.684 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.685 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:18.687 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:19.804 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:19.805 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:19.805 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:19.835 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.671 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.672 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.673 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.674 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.675 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.676 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.677 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.677 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.684 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.684 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.685 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.686 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.687 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.687 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.688 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.689 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.697 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.698 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.700 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.701 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.701 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.702 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.711 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-08-01 06:54:20.715 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DeltaGenerator()"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}